/*
Even Fibonacci numbers
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

function sumEvenFibonacci(threshold) {
	function generateFibonacci(threshold) {
		var fibonacci = [1, 2];
		while (fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2] < threshold) {
			fibonacci.push(fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2]);
		}
		return fibonacci;
	}
	var fibonacci = generateFibonacci(threshold),
	evenFibonacci = [], len = fibonacci.length, i;
	for (i = 0; i < len; i++) {
		if (fibonacci[i] % 2 === 0) evenFibonacci.push(fibonacci[i]);
	}
	return evenFibonacci.reduce(function(a, b) {
		return a + b;
	});
}


/*
Multiples of 3 and 5
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

function sumMultiples(threshold) {
	function getMultiples(num, arr) {
		var current = 0;
		while (current + num < threshold) {
			current = current + num;
			if (arr.indexOf(current) === -1) arr.push(current);
		}
		return arr;
	}	
	var multiples = [];
	multiples = getMultiples(3, multiples);
	multiples = getMultiples(5, multiples);

	return multiples.reduce(function(a, b) {
		return a + b;
	});
	
}

sumMultiples(1000); 