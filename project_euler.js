/*
Sum square difference
Problem 6
The sum of the squares of the first ten natural numbers is,

12 + 22 + ... + 102 = 385
The square of the sum of the first ten natural numbers is,

(1 + 2 + ... + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers
and the square of the sum is 3025 âˆ’ 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
*/

function sumSqDiff(num) {
	var sumOfSq = 0, sqOfSum = 0, i;
	for (i = 1; i <= num; i++) {
		sumOfSq = sumOfSq + (i * i);
		sqOfSum = sqOfSum + i;
	}
	sqOfSum = sqOfSum * sqOfSum;
	return sqOfSum - sumOfSq;
}

/*
Summation of primes
Problem 10
The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

Find the sum of all the primes below two million.
*/

function sumPrimes(threshold) {
	function getPrimes(threshold) {
		var primes = [2], i;
		for (i = 2; i < threshold; i++) {
			if (i % 2 !== 0 && isPrime(i)) primes.push(i);
		}
		return primes;
	}
	function isPrime(num) {
		var i;
		for (i = 2; i < num; i++) {
			if (num % i === 0) return false;
		}
		return num > 1;
	}
	var primes = getPrimes(threshold);
	return primes.reduce(function(a, b) {
		return a + b;
	});
}

// 142913828922


/*
Smallest multiple
Problem 5
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
*/

function smallestMultiple(max) {
	function evenlyDivisible(num, max) {
		var i;
		for (i = 1; i <= max; i++) {
			if (num % i !== 0) return false;
		}
		return true;
	}
	var number = max * 2;
	while (!evenlyDivisible(number, max)) {
		number = number + max;
	}
	return number;
}

/*
Even Fibonacci numbers
Problem 2
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/

function sumEvenFibonacci(threshold) {
	function generateFibonacci(threshold) {
		var fibonacci = [1, 2];
		while (fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2] < threshold) {
			fibonacci.push(fibonacci[fibonacci.length - 1] + fibonacci[fibonacci.length - 2]);
		}
		return fibonacci;
	}
	var fibonacci = generateFibonacci(threshold),
	evenFibonacci = [], len = fibonacci.length, i;
	for (i = 0; i < len; i++) {
		if (fibonacci[i] % 2 === 0) evenFibonacci.push(fibonacci[i]);
	}
	return evenFibonacci.reduce(function(a, b) {
		return a + b;
	});
}


/*
Multiples of 3 and 5
Problem 1
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.
*/

function sumMultiples(threshold) {
	function getMultiples(num, arr) {
		var current = 0;
		while (current + num < threshold) {
			current = current + num;
			if (arr.indexOf(current) === -1) arr.push(current);
		}
		return arr;
	}	
	var multiples = [];
	multiples = getMultiples(3, multiples);
	multiples = getMultiples(5, multiples);

	return multiples.reduce(function(a, b) {
		return a + b;
	});
}

sumMultiples(1000); 